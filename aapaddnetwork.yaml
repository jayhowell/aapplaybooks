---
- name: Ensure all VMs in canon-test namespace have cusa network and interface
  hosts: localhost
  gather_facts: no
  vars:
    vm_namespaces:
      - canon-test   # <-- only this namespace

  tasks:
    - name: Get all VMs in each namespace
      kubernetes.core.k8s_info:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        namespace: "{{ ns }}"
      loop: "{{ vm_namespaces }}"
      loop_control:
        loop_var: ns
        label: "{{ ns }}"
      register: all_vms

    - name: Set fact with all VMs across namespaces
      set_fact:
        vms: "{{ query('subelements', all_vms.results, 'resources', skip_missing=True) }}"

    - name: Patch VM to add cusa network
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.1.metadata.name }} (ns: {{ item.0.ns }})"
      when: "'cusa' not in (item.1.spec.template.spec.networks | default([]) | map(attribute='name') | list)"
      kubernetes.core.k8s:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ item.1.metadata.name }}"
        namespace: "{{ item.0.ns }}"
        merge_type: strategic-merge
        definition:
          spec:
            template:
              spec:
                networks:
                  - name: cusa
                    multus:
                      networkName: cusa-canon

    - name: Patch VM to add cusa interface
      loop: "{{ vms }}"
      loop_control:
        label: "{{ item.1.metadata.name }} (ns: {{ item.0.ns }})"
      when: "'cusa' not in (item.1.spec.template.spec.domain.devices.interfaces | default([]) | map(attribute='name') | list)"
      kubernetes.core.k8s:
        api_version: kubevirt.io/v1
        kind: VirtualMachine
        name: "{{ item.1.metadata.name }}"
        namespace: "{{ item.0.ns }}"
        merge_type: strategic-merge
        definition:
          spec:
            template:
              spec:
                domain:
                  devices:
                    interfaces:
                      - name: cusa
                        bridge: {}

    - name: Debug patched VMs
      debug:
        msg: "Patched VM {{ item.1.metadata.name }} in namespace {{ item.0.ns }}"
      loop: "{{ vms }}"
      when: >
        ('cusa' not in (item.1.spec.template.spec.networks | default([]) | map(attribute='name') | list)) or
        ('cusa' not in (item.1.spec.template.spec.domain.devices.interfaces | default([]) | map(attribute='name') | list))


